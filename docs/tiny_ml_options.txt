Here are the key tools and approaches used for machine learning on Arduino and similar embedded devices:

1. Frameworks and Libraries:

TensorFlow Lite for Microcontrollers (TFLite Micro): This is the leading framework for TinyML.
It's a highly optimized version of TensorFlow Lite designed to run machine learning models on microcontrollers with very limited memory (kilobytes) and processing power.
You train your model (e.g., in Python using TensorFlow or Keras) on a powerful computer, then convert it to a TFLite Micro format.
TFLite Micro then generates C++ code that you can compile and upload to your Arduino board.
It includes pre-built kernels optimized for common microcontroller operations.
Arduino has strong integration with TFLite Micro, often providing examples and libraries (like Arduino_TensorFlowLite).
Edge Impulse: This is a comprehensive platform that simplifies the entire TinyML workflow.
It allows you to collect data from your embedded device (like an Arduino Nano 33 BLE Sense), design and train machine learning models (including neural networks, anomaly detection, etc.) in the cloud, and then deploy them back to your device as optimized firmware or an Arduino library.
Edge Impulse handles the model optimization (quantization, pruning) automatically, making it much easier to get a working model on your Arduino.
They have strong partnerships with Arduino, providing a branded experience within the Arduino Cloud.
Arm CMSIS-NN: For Arm Cortex-M based microcontrollers (which many Arduinos use, like the Nano 33 BLE Sense), CMSIS-NN provides a collection of highly optimized neural network kernels.
These kernels are designed to leverage the specific architecture of Arm Cortex-M processors, significantly reducing memory requirements and enhancing performance for inference.
It often works in conjunction with TFLite Micro, providing the low-level optimized computations.
MicroTensor (less common but worth noting): Another lightweight framework focused on deploying AI models on microcontrollers, designed for modularity and custom applications.
2. Model Optimization Techniques (often integrated into the tools above):

Quantization: This is a crucial technique for TinyML. It reduces the precision of the model's parameters (weights and activations) from floating-point numbers (e.g., 32-bit) to lower-bit representations (e.g., 8-bit integers).

This dramatically reduces the model's size and computational requirements with minimal impact on accuracy.
Both post-training quantization (quantizing after training) and quantization-aware training (training the model with quantization in mind) are used.
Pruning: This involves removing less important connections or neurons in a neural network. It "thins" the model, reducing its size and computational load. 
After pruning, a fine-tuning process is often applied to regain any lost accuracy.
Knowledge Distillation: A smaller "student" model is trained to mimic the behavior of a larger "teacher" model, effectively compressing the model while retaining much of the original performance.
3. Hardware Considerations (for Arduino):

Arduino Nano 33 BLE Sense / Rev2: These boards are particularly well-suited for TinyML due to their powerful Cortex-M4 microcontroller, sufficient memory (often 256KB Flash, 32KB RAM), and a rich set of onboard sensors (IMU, microphone, environmental sensors).
Arduino Nicla Sense ME, Nicla Vision, Portenta H7: These are more advanced Arduino boards with even greater processing power and memory, suitable for more complex TinyML applications, including vision.
Other 32-bit Arduinos (e.g., ESP32-based boards): While not officially "Arduino" branded, many ESP32 development boards are compatible with Arduino IDE and can run TFLite Micro models, offering a balance of power and cost-effectiveness.
General Workflow for TinyML on Arduino:

Data Collection: Gather sensor data from your Arduino board or a similar device. This data will be used to train your machine learning model.
Model Training (on a powerful computer):
Use a framework like TensorFlow/Keras (in Python) to train a small machine learning model (e.g., a neural network for classification, regression, or anomaly detection).
Apply TinyML-specific optimization techniques like quantization during or after training.
Model Conversion: Convert your trained model to the TFLite Micro format. This typically generates a C++ header file.
Deployment to Arduino:
Integrate the generated model (e.g., model.h) into your Arduino sketch.
Use the TFLite Micro library (or a platform like Edge Impulse) to perform inference on your Arduino board using real-time sensor data.
Upload the sketch to your Arduino.
Testing and Optimization: Test the model's performance on the Arduino and fine-tune parameters or the model architecture as needed to achieve desired accuracy and efficiency.


Important site for more info:
https://docs.arduino.cc/tutorials/nano-33-ble-sense/get-started-with-machine-learning/
https://github.com/tensorflow/tflite-micro-arduino-examples